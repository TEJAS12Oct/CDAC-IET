package Int;

public class LinkList {

	private Node head;

	public LinkList() {
		head = null;
	}

	public LinkList(Node head) {
		this.head = head;
	}

	public void insert(int data) { // Insert Time Complexity = o(1)
		Node tmp = new Node(data);

		if (head == null) {
			head = tmp;
		} else {
			tmp.next = head; // head content copy in temp.next
			head = tmp;
		}
	}

	public void append(int data) { // Append Time Complexity = o(1)
		Node tmp = new Node(data);

		if (head == null) {
			head = tmp;
		} else {
			Node it = head;
			while (it.next != null) {
				it = it.next;
			}

			// it reaches at last Node
			it.next = tmp;
			tmp.next = null;
		}
	}

	public int getLLLength() {

		int noOfNodes = 0;
		Node it = head;
		while (it != null) {
			noOfNodes++;
			it = it.next;
		}
		return noOfNodes;
	}

	public void insertByPosition(int value, int pos) {
		int noOfNodes = getLLLength();

		if (pos == 1) {
			insert(value);
		} else if (pos == noOfNodes + 1) {
			append(value);

		} else if (pos > 1 && pos < noOfNodes + 1) {
			Node tmp = new Node(value);
			// we are sure ... inserting in middle
			Node it = head;
			for (int i = 1; i < pos - 1; i++) {
				it = it.next;
			}
			tmp.next = it.next;
			it.next = tmp;
		} else {
			System.out.println("Invalid  Position");
		}
	}

	public void deleteFirst() {

		if (head == null) {
			System.out.println("LinkList  Is Empty ");
		} else {

			// Check if only i node is LL
			if (head.next == null) {
				head = null;

			} else {
				if (head.next == null) {
					head = null;
				} else {
					// More Than 1 Node
					Node t = head;
					head = t.next;
					t.next = null;
				}

			}

		}
	}

	public void deleteLast() {

		if (head == null) {
			System.out.println("LinkList  Is Empty ");
		}
//			else {
//			Node t = null;
//			Node it = head;
//			while (it.next != null) {
//				t = it;
//				it = it.next;
//			}
//			t.next = null;
//			it = null;
//
//		}

		else {
			Node t = head;
			while (t.next.next != null)
				t = t.next;
			t.next = null;
		}

	}

	public void deleteByPosition(int value, int pos) {
		int noOfNodes = getLLLength();

		if (pos == 1) {
			deleteFirst();
		} else if (pos == noOfNodes) {
			deleteLast();

		} else if (pos > 1 && pos < noOfNodes) {

			Node it = head;
			for (int i = 1; i < pos - 1; i++) {
				it = it.next;
			}
			Node t = it.next;
			it.next = t.next;
			t.next = null;
		} else {
			System.out.println("Invalid  Position");
		}
	}

	public String toString() {
		String str = "";

		if (head == null) {
			str = "LinkList  Is Empty";
		} else {
			Node it = head;
			// while (it.next != null) { // this is without last node
			while (it != null) { // with last node

				str += it.data + " , ";
				it = it.next;
			}
		}
		return str;
	}
}
