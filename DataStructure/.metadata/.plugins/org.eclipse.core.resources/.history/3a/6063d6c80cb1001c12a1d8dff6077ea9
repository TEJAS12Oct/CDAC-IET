package Stack1;

public class Stack {

	// attributes and field
	private int[] arr;
	private int top;

	public Stack() {
		this.arr = new int[5];
		this.top = -1;
	}

	public Stack(int size) {
		this.arr = new int[size];
		this.top = -1;
	}

	public void push(int value) {
		// overflow condition
		if (this.top < this.arr.length - 1) {
			this.top++;
			this.arr[this.top] = value;
		} else
			System.out.println("Overflow...");
	}

	public int pop() {
		if (this.top != -1) {
			int value = this.arr[this.top];
			this.top--;
			return value;
		} else
			System.out.println("Underflow...");
		return 0;
	}

	public String toString() {

		String str = "";
		if (this.top == -1)
			str = "Stack is empty";
		else {
			for (int i = this.top; i >= 0; i--)
				str = str + (this.arr[i] + ", ");
		}

		return str;
	}

	public boolean equals(Stack s2) {
		// s1.equals(s2)
		// s1 ==> this
		// s2 ==> x
		System.out.println("s1 length  = "+ this.arr.length);
		System.out.println("s2 Length  = " + s2.arr.length);
		if (this.arr.length != s2.arr.length)
			return false;

		
		if (this.top != s2.top)
			return false;

		// iterate on both arr and check each element
		for (int i = 0; i < this.top; i++) {

			if (this.arr[i] != s2.arr[i]) {
				return false;
			}
		}

		return true;
	}

	public Stack concat(Stack s2) {
		Stack res = new Stack(this.arr.length + s2.arr.length);
		for (int i = 0; i <= this.top; i++) {
			res.push(this.arr[i]);
		}
		for (int i = 0; i <= s2.top; i++) {
			res.push(s2.arr[i]);
		}
		return res;

	}

}
