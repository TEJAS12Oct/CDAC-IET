To implement virtual functions, C++ uses a special form of late binding known as the virtual table or vTable. The virtual table is a lookup table of functions used to resolve function calls in a dynamic/late binding manner.

Every class that uses virtual functions (or is derived from a class that uses virtual functions) is given its own virtual table.

This table is simply a static array that the compiler creates at compile time. A virtual table contains one entry for each virtual function that can be called by objects of the class.

Each entry in this vTable is simply a Function Pointer that points to the most-derived function accessible by that class ie the most Base Class.

The compiler also adds a hidden pointer to the base class, which we will call *__vPtr.

*__vPtr is set (automatically) when a class instance is created so that it points to the virtual table for that class. *__vPtr is inherited by derived classes,

_________________________________________________

In other words --


 
Virtual table - A table created at compile time for every single class containing the most derived versions of virtual functions only. 

Virtual pointer - A data member silently inserted by compiler into the class specification and initialized to virtual table from within constructor.

Once virtual table and pointer fall in place, compiler silently inserts piece of code before any virtual function call via base class pointer to dereference virtual pointer, go to virtual table and derive the most latest version of it. All this happens at run time on and so called as run time polymorphism OR late binding.

