A#Q1.Mapping files (*.hbm.xml) is used __________.
A. to map persistent objects to a relational
database.
B. to configure the hibernate services
(connection driver class, connection URL)
C. to configure the hibernate services
(connection username, connection password,
dialect etc)
D. All the above
A#Q1ANS=1
A#Q2. 
Which of the following is true about Entity beans and
Hibernate?
a) X in Entity Bean at a time we can interact
with only one database. Where as in
Hibernate we can able to establish the
connections to more than one database.
Only thing we need to write one more
configuration file.X x
b) Entity Beans does not support OOPS
concepts where as Hibernate does.
c) Hibernate supports multi level caching,
where as Entity Beans doesn’t.
A. Only a
B. Only a and b
C. All a, b and c
D. Only c
A#Q2ANS=C
A#Q3.Identify the most appropriate definition of
getEJBMetaData()
A. This method allows the clients to obtain extra
information about the EJB.This method
throws a java.rmi.RemoteException.
B. This method is used to get a handle for the
home object. This obtained handle can be
used later to get the handle to the home
object.
C. This method is used to remove an EJB
object. It has two forms. The first orm takes a
Handle object a parameter and the other
takes the primary key as a parameter.
D. This method returns an instance of the
entity’s primary key class. With this method,
you can set bean attributes.
A#Q3ANS=A
A#Q4.Which statement is true regarding action class of
struts?
A. An action class can not acts as wrapper
class
B. An action class extends struts
“org.apache.struts.action.Action” class
C. Action class can not transfer data from view
layer to process layer
D. None of the above
A#Q4ANS=B
A#Q5.
An online retailer uses various EJBs to construct their
catalogue and maintain stock counts, retrieving the
item codes, prices and stock levels singularly. They
have recently been delivered a custom-built website,
but the developers forgot to ask what data storage
mechanism they were using and therefore supplied
them only with a set of helper beans and some
database drivers. What combination of patterns
would you use to interface the helper beans with their
EJB application?
A. Model-View-Controller
B. Business Delegate
C. Intercepting Filter
D. Transfer Object
A#Q5ANS=B

A#Q6. What is the effect of compiling and executing the
following code?
A. The response is the text’9 8 7 6 5’
B. The response is the text ‘0 1 2 3 4 ‘
C. The response is the text ‘1 2 3 4 5 ‘
D. The response is empty.
A#Q6ANS=B
A#Q7. exception indicates to the web container
that the servlet is either temporarily or permanently
unavailable
A. ServletException
B. IllegalArguementException
C. UnavailableException
D. ServletContextException
A#Q7ANS=C

A#Q8.
A session is created in a servlet and that servlet has a form, which has a button. On clicking the button a
new window pops up, what happens next?
A. The session is invalidated as soon as a new
window pops up
B. Any attempt to access objects present in
session throws a Exception
C. The session is available to the new window
also
D. None of the above.
A#Q8ANS=3

A#Q9. Which of the following is legal JSP syntax to print the value of i. Select the one correct answer
A. <%int i = 1;%>
<%= i; %>

B. <%int i = 1;
i; %>

C. <%int i = 1%>
<%= i %>

D. <%int i = 1;%>
<%= i %>

E. <%int i = 1%>
<%= i; %>
A#Q9ANS=D

A#Q10. Which of the following are correct. Select the one correct answer.

A. JSP scriptlets and declarations result in code that is inserted inside the _jspService method.
B. The JSP statement <%! int x; %> is equivalent to the statement <jsp:scriptlet>int x;</jsp:scriptlet%>.
C. The following are some of the predefined variables that maybe used in JSP expression – httpSession, context.
D. To use the character %> inside a scriptlet, you may use %> instead.
A#Q10ANS=D

A#Q11. Name the implicit variable available to JSP pages that may be used to access all the other implicit objects.

A. page
B. pageContext
C. context
D. object

A#Q11ANS=B
A#Q12.Which of these is true about include directive. Select the one correct answer.

A. The included file must have jspf extension.
B. The XML syntax of include directive in <jsp:include file=”fileName”/> .
C. The content of file included using include directive, cannot refer to variables local to the original page.
D. When using the include directive, the JSP container treats the file to be included as if it was part of the original file.
A#Q12ANS=D

A#Q13. 
Which of these are true. Select the two correct answers.

A. The default value of isThreadSafe attribute of page directive is true.
B. If isThreadSafe attribute of page directive is set to true, then JSP container dispatches request for the page sequentially.
C. When isThreadSafe attribute of page directive is set to true, a thread is created for each request for the page.
D. Setting isThreadSage attribute to true for JSP pages, can lead to poor performance.
A#Q13ANS=A,C

A#Q14.
Which of the following JSP variables are not available within a JSP expression. Select the one correct answer.
A. session
B. request
C. response
D. httpsession
A#Q14ANS=D

A#Q15.
 A bean with a property color is loaded using the following statement

<jsp:usebean id=”fruit” class=”Fruit”/>

Which of the following statements may be used to print the value of color property of the bean. Select the one correct answer.

A. <jsp:getProperty id=”fruit” property=”color”/>
B. <jsp:getProperty bean=”fruit” property=”color”/>
C.<jsp:getProperty name=”fruit” property=”color”/>
D. <jsp:getProperty class=”Fruit” property=”color”/>
A#Q15ANS=C

A#Q16. TreeMap class is used to implement which collection interface. Select the one correct answer.

A. SortedSet
B. List
C. Tree
D. SortedMap
A#Q16ANS=D

A#Q17. Is this true or false. Map interface is derived from the Collection interface.
A. True
B. False
C. NA
D. NONE ABOVE
A#Q17ANS=B

A#Q18. A JSP is transformed into a(n):
     A.      Java applet.
     B.      Java servlet.
     C.      Either 1 or 2 above.
     D.     Neither 1 nor 2 above.

A#Q18ANS=B
A#Q19.Which option is true about session scope?
A. Objects are accessible only from the page in which they are created
B. Objects are accessible only from the pages which are in same session
C. Objects are accessible only from the pages which are processing the same request
D. Objects are accessible only from the pages which reside in same application
A#Q19ANS=B

A#Q20. Which is mandatory in <jsp:useBean /> tag?
A. id, class
B. id, type
C. type, property
D. type,id
A#Q20ANS=A

A#Q21. Object which can store group of other object is called______
 (a)Collection object (b)Java object
 (c)Package (d)Wrapper
A#Q21ANS=A
A#Q22.in which folder  of  tomcat you have to put your webapplication
A. WEBAPP
B. WEBAPPS
C. ALL ABOVE
D. NA
A#Q22ANS=C
A#Q23. YSERVLET IS STANDALONE APP?
A. TRUE
B. FALSE
C. NA
D. NONE
A#Q23ANS=B
A#Q24. Instance to translate the native Hibernate exceptions into data access exceptions in Spring DataAccessException hierarchy.
A. PersistenceExceptionPostProcessor
B. PersistenceExceptionTranslation
C. PersistenceException
D. PersistenceExceptionTranslationPostProcessor
A#Q24ANS=D

A#Q25. Annotation used for entity manager injection in EJB components.
A.  @PersistenceContext
B. @Persistence
C. @PersistenceCon
D. None of the mentioned
A#Q25ANS=A

							
A#Q26.JpaTemplate will translate the native JPA exceptions into exceptions in Spring DataAccessException hierarchy.
A. True
B. False
C. NONE
D. NA
A#Q26ANS=A
A#Q27.Instance to translate the native Hibernate exceptions into data access exceptions in Spring DataAccessException hierarchy.
A. PersistenceExceptionPostProcessor
B. PersistenceExceptionTranslation
C. PersistenceException
D.  PersistenceExceptionTranslationPostProcessor
A#Q27ANS=D

A#Q28.There are several properties you must configure for an RmiServiceExporter instance:-
A. service name
B.  service interface
C. service object
D. all of the mentioned
A#Q28ANS=D


A#Q29.The Spring support classes facilitate building session beans:-
A. stateful session beans (SFSBs)
B. stateless session beans (SLSBs)
C. message-driven beans (MDBs)
D. all of the mentioned
A#Q29ANS=D

A#Q30.How do we create a FileSystemObject?
A.Server.CreateObject("Scripting.FileSystemObject")
B.Create("FileSystemObject")
C.Create Object:"Scripting.FileSystemObject"
D.Server.CreateObject("FileSystemObject")
A#Q30ANS=A
A#Q31.What class does the ASP.NET Web Form class inherit from by default?
A.System.WeB.UI.Page
B.System.WeB.UI.Form
C.System.WeB.GUI.Page
D.System.WeB.Form
A#Q31ANS=A
A#Q32.Messages sent on the requests channel are forwarded to the:-
A. jms:outbound-gateway
B.  jms:outbound
C. jms-gateway
D. all of the mentioned
A#Q32ANS=A
A#Q33.Method used to process bean after initialization callback
A.  scope
B.  getBean
C.  postProcessAfterInitialization()
D.  it’s own constructor
A#Q33ANS=C

A#Q34.Which method is used to register BeanPostProcessor?
A. addBeanPostProcessors
B. registerBeanPostProcessors
C.  addBeanProcessors
D.  none of the mentioned
A#Q34ANS=A

A#Q35.JSF view handler to enable Facelets and a SpringBeanFacesELResolver to access Spring beans.
A. FaceletViewHandler
B. FaceletView
C.  FaceletHandler
D.  None of the mentioned
A#Q35ANS=A

A#Q36.To resolve Facelets views we configure:-
A.  ViewFacelets
B.  ViewResolver
C.  View-resolver
D.  View_Resolver
A#Q36ANS=B

A#Q37.// filename Main.java 
class Test { 
    protected int x, y; 
} 
  
class Main { 
    public static void main(String args[]) { 
        Test t = new Test(); 
        System.out.println(t.x + " " + t.y); 
    } 
} 
A.3,4
B.2,3
C.0,0
D.1,1
A#Q37ANS=C

A#Q38.// filename Test.java 
class Test { 
   public static void main(String args[]) { 
       System.out.println(fun()); 
   } 
   static int fun() { 
       static int x= 0; 
       return ++x; 
   } 
} 
A.0
B.51
C.SYNTAX ERROR
D.COMPILOR ERROR
A#Q38ANS=D

A#Q39.public class Test 
{ 
    private int data = 5; 
  
    public int getData() 
    { 
        return this.data; 
    } 
    public int getData(int value) 
    { 
        return (data+1); 
    } 
    public int getData(int... value) 
    { 
        return  (data+2); 
    } 
  
    public static void main(String[] args) 
    { 
        Test temp = new Test(); 
        System.out.println(temp.getData(7, 8, 12)); 
    } 
} 
A. Either Compile time or Runtime error
B. 8
C. 10
D. 7
A#Q39ANS=D
A#Q40.
import java.util.*; 
class demo10 { 
    public static void main(String[] args) 
    { 
        Vector v = new Vector(30); 
        v.addElement("Geeksforgeeks"); 
        Vector v1 = new Vector(); 
        v1 = (Vector)v.clone(); 
        v.insertElementAt("Java", 0); 
        System.out.println(v1.contains("Java")); 
    } 
} 
 
A. Geeksforgeeks
 
B.Geeksforgeeks
    Geeksforgeeks
 
C. COMPLIER ERROR
 
D. FALSE

A#Q40ANS=D
A#Q41.

import java.util.*; 
class demo6 { 
    public static void main(String[] args) 
    { 
        Vector v = new Vector(30); 
        v.addElement("Geeksforgeeks"); 
        v.insertElementAt("Java", 0); 
        System.out.println(v.indexOf("Geeksforgeeks")); 
    } 
} 

 
A.1
 
B.31
 
C..1
 
D. NONE
A#Q41ANS=A

A#Q42.
import java.util.*; 
  
public class stack 
{ 
    public static void main(String[] args) 
    { 
        List<String> list = new LinkedList<>(); 
        list.add("Geeks"); 
        list.add("for"); 
        list.add("Geeks"); 
        list.add("GeeksforGeeks"); 
        Iterator<Integer> iter = list.iterator(); 
  
        while (iter.hasNext()) 
            System.out.printf(iter.next() + " "); 
  
        System.out.println(); 
    } 
} 
A. Geeks for Geeks GeeksforGeeks
B.GeeksforGeeks Geeks for Geeks
C. Runtime Error
D. Compilation Error
A#Q42ANS=D

A#Q43.import java.util.*; 
  
public class hashSet 
{ 
    public static void main(String[] args) 
    { 
        HashSet<String> hashSet = new HashSet<>(); 
        hashSet.add("Geeks"); 
        hashSet.add("for"); 
        hashSet.add("Geeks"); 
        hashSet.add("GeeksforGeeks"); 
  
        System.out.println(hashSet); 
  
    } 
} 
A. [Geeks, for, Geeks, GeeksforGeeks]
B. [GeeksforGeeks, Geeks, for]
C. NA
D. NONE
A#Q43ANS=D

A#Q44.import java.util.*; 
  
public class linkedList 
{ 
    public static void main(String[] args) 
    { 
        List<String> list1 = new LinkedList<>(); 
        list1.add("Geeks"); 
        list1.add("for"); 
        list1.add("Geeks"); 
        list1.add("GFG"); 
        list1.add("GeeksforGeeks"); 
  
        List<String> list2 = new LinkedList<>(); 
        list2.add("Geeks"); 
  
        list1.removeAll(list2); 
  
        for (String temp : list1) 
            System.out.printf(temp + " "); 
  
        System.out.println(); 
    } 
} 
A. for Geeks GFG GeeksforGeeks
B. for GeeksforGeeks GFG
C. for GFG for
D. for GFG GeeksforGeeks
A#Q44ANS=D

A#Q45. import java.util.*; 
  
public class Treeset 
{ 
    public static void main(String[] args) 
    { 
        TreeSet<String> treeSet = new TreeSet<>(); 
  
        treeSet.add("Geeks"); 
        treeSet.add("for"); 
        treeSet.add("Geeks"); 
        treeSet.add("GeeksforGeeks"); 
  
        for (String temp : treeSet) 
            System.out.printf(temp + " "); 
  
        System.out.println("\n"); 
    } 
} 
A. Geeks for Geeks GeeksforGeeks
B. Geeks for GeeksforGeeks
C. Geeks GeeksforGeeks for
D. for GeeksforGeeks Geeks

A#Q45ANS=C

A#Q46. 

import java.util.*; 
  
public class priorityQueue 
{ 
    public static void main(String[] args) 
    { 
        PriorityQueue<Integer> queue = 
                            new PriorityQueue<>(); 
        queue.add(11); 
        queue.add(10); 
        queue.add(22); 
        queue.add(5); 
        queue.add(12); 
        queue.add(2); 
  
        while (queue.isEmpty() == false) 
            System.out.printf("%d ", queue.remove()); 
  
        System.out.println("\n"); 
    } 
} 
A. 11 10 22 5 12 2
B. 2 12 5 22 10 11
C. 2 5 10 11 12 22
D. 22 12 11 10 5 2
A#Q46ANS=C
A#Q47. class GfG 
{ 
    public static void main(String args[]) 
    { 
        String s1 = new String("geeksforgeeks"); 
        String s2 = new String("geeksforgeeks"); 
        if (s1 == s2)  
            System.out.println("Equal"); 
        else
            System.out.println("Not equal"); 
    } 
} 
A. NOT EQUAL
B. EQUAL
C. NA
D. NONE
A#Q47ANS=A

A#Q48. 
public class Base 
{ 
    private int data; 
  
    public Base() 
    { 
        data = 5; 
    } 
  
    public int getData() 
    { 
        return this.data; 
    } 
} 
  
class Derived extends Base 
{ 
    private int data; 
    public Derived() 
    { 
        data = 6; 
    } 
    private int getData() 
    { 
        return data; 
    } 
  
    public static void main(String[] args) 
    { 
        Derived myData = new Derived(); 
        System.out.println(myData.getData()); 
    } 
} 
A. 6
B. 5
C. Compile time error
D. Run time error

A#Q48ANS=C

A#Q49. 
public class Base 
{ 
    private int multiplier(int data) 
    { 
        return data*5; 
    } 
} 
  
class Derived extends Base 
{ 
    private static int data; 
    public Derived() 
    { 
        data = 25; 
    } 
    public static void main(String[] args) 
    { 
        Base temp = new Derived(); 
        System.out.println(temp.multiplier(data)); 
    } 
} 
A. 125
B. 25
C. Runtime error
D. Compile time error
A#Q49ANS=D
A#Q50. Which of the following is FALSE about finally block?
A. For each try block, there can be only 1 finally block.
B. finally block will not be executed if program exits by calling System.exit();
C. If an exception is not handled in the catch statement, before terminating the program, JVM executes the finally block
D. finally block contains important code segment and so the code inside finally block is executed with/without the presence of try block in java code.

  A#Q50ANS=D


