// Server

ipconfig
mongod --dbpath="F:\IET\CODING\DBT\MonGoDB" --bind_ip=192.168.43.120 --journal   //IP ADDRESS CONNECT

mongod --dbpath="F:\IET\CODING\DBT\MonGoDB" --journal //LOCALHOST RUN


// Client
mongo --host=192.168.43.120 --port=27017 ///IP ADDRESS CONNECT
mongo //localhost RUN

show databases;
db.version();
db.getMongo();
db.hostInfo();
db.stats();
getHostName();
db

------------------------------------------------
27-05-2022
// Localhost login..............................


show dbs;
db.getName();
use primaryDB;
db.getName();
show dbs;
db
show tables;

db.getCollectionNames(); 
db.createCollection("Books");
db.getCollectionNames();
db.createCollection("Items");
db.getCollectionNames();

// Semi Structure =Structure Not Fixed , you can add Column as You need 
db.Books.insert({"Title":"JAVA C.R.","Author":"Tejas"});
db.Books.find();

db.Books.insert({"Title":"MySQL","Author":"Sayali","Price":1200});
db.Books.find();

db.Books.insertOne({"Title":"Neo4j","Author":"Mayur","Cost":{"Currency":"Rs.","Price":1700 } }); // Embeded Document
db.Books.find();

db.Books.insertOne({"Title":"SHAM CHI AAI","Author":"Pandurang Sadashiv Sane","Phone":[1234567,7654321],"EmailID":["ABC@gmail.com","DEF@gamil.com"],"Cost":{"Currency":"$","Price":1300 } });
db.Books.find();

db.Books.find().forEach(printjson); //Print All data In Book

db.Books.insertMany([ {"Title":"hBase","ISBN":"BVC321","Cost":{"Currency":"Rs.","Price":1300},"Author":[{"Name":"Ram","City":"Pune"},{"Name":"SHAM","City":"Nashik","Phone":12345}] } , {"Title":"Hive","ISBN":"ERT325","Cost":"Rs. 120"} ]);
db.Books.find();
db.Books.find().forEach(printjson);

db.Books.find();

db.Books.find({},{"_id":false,"Title":true}); // print only Title
db.Books.find({},{"_id":false,"Cost":0}); // ID , COST Sodun Sagel Print
db.Books.find({},{"Title":true});

// File Import
1. mongoimport --db=primaryDB --collection=emp --type=json --file="F:\IET\CODING\DBT\MongoDB-Programs\empForMongodb.json" // LocalHost

2. mongoimport --host=192.168.43.120 --port=27017 --db=primaryDB --collection=emp --type=json --file="F:\IET\CODING\DBT\MongoDB-Programs\empForMongodb.json" // IP Address



db.getCollectionNames();
db.Books.find();
it

db.emp.find({},{ename:true,job:true,sal:true});
db.emp.find({},{_id:false,ename:true,job:true,sal:true});

db.emp.find({"job":"manager"});
db.emp.find({"job":"manager"},{_id:0,ename:1,job:1,sal:1,address:1});
db.emp.find({"job":"manager"},{_id:0,ename:1,job:1,sal:1,address:1}).pretty();
db.emp.find({"job":"manager"},{_id:0,ename:1,job:1,sal:1});

db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:0,ename:1,job:1,sal:1});
db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:0,ename:1,job:1,Salary:"$sal"});

db.emp.find( {ename:/^a/},{_id:0,ename:1,job:1,Salary:"$sal"}); // start a
db.emp.find( {ename:/a/},{_id:0,ename:1,job:1,Salary:"$sal"}); // Display all a
db.emp.find( {ename:/^am/},{_id:0,ename:1,job:1,Salary:"$sal"}); // start AM
db.emp.find( {ename:/t$/},{_id:0,ename:1,job:1,Salary:"$sal"}); // End T
db.emp.find( {ename:/t/},{_id:0,ename:1,job:1,Salary:"$sal"}); // Display all t$/

db.emp.find( {},{_id:0,ename:1,job:1,Salary:"$sal"});
db.emp.find( {},{_id:0,ename:1,job:1,Salary:"$sal"})[0]; // first record print according index [];
db.emp.find( {},{_id:0,ename:1,job:1,Salary:"$sal"})[6];
db.emp.find()[6]; // Form Of Preety
db.emp.find()[29].ename;
db.emp.find()[29].job;

db.emp.find( {},{_id:0,ename:1,job:1,Salary:"$sal"}).sort({ename:1}); // Ascending
db.emp.find( {},{_id:0,ename:1,job:1,Salary:"$sal"}).sort({ename:-1}); // Decending

db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:0,ename:1,job:1,Salary:"$sal"})
db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:0,ename:1,job:1,Salary:"$sal"}).sort({sal:1});
db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:0,ename:1,job:1,Salary:"$sal"}).sort({sal:-1});
// Alias ne Sort Hot hi

db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:0,ename:1,job:1,Salary:"$sal"}).limit(5);
db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:0,ename:1,job:1,Salary:"$sal"}).skip(2).limit(5); // Pahile  2 sodun next 5 print

db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:0,ename:1,job:1,Salary:"$sal"}).sort({ename:1}).skip(2).limit(5);
db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:0,ename:1,job:1,Salary:"$sal"}).sort({ename:-1}).skip(2).limit(5);

db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:0,ename:1,job:1,Salary:"$sal"}).sort({ename:1});
db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:0,ename:1,job:1,Salary:"$sal"}).sort({ename:1}).skip(2);
db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:0,ename:1,job:1,Salary:"$sal"}).sort({ename:1}).skip(2).limit(2);

db.emp.count();
db.emp.find({$or:[{job:'manager'},{job:'salesman'}]},{_id:1});
db.emp.count({$or:[{job:'manager'},{job:'salesman'}]});
db.emp.countDocuments({$or:[{job:'manager'},{job:'salesman'}]});
db.emp.countDocuments({});

db.emp.find( {},{_id:0,job:1});
db.emp.distinct("job");

db.emp.find( {sal:5000},{_id:0,ename:1,job:1,Salary:"$sal"});
db.emp.find( {$and:[ {sal:{$gte:2000}},{sal:{$lte:5000}} ]},{_id:0,ename:1,job:1,Salary:"$sal"});
db.emp.find( {$and:[ {sal:{$gte:3000}},{sal:{$lte:5000}} ]},{_id:0,ename:1,job:1,Salary:"$sal"});
db.emp.find( {$and:[ {sal:{$gte:3000}},{sal:{$lte:4500}} ]},{_id:0,ename:1,job:1,Salary:"$sal"});
db.emp.find( {$and:[ {sal:{$gte:3000}},{sal:{$lte:4500}} ]},{_id:0,ename:1,job:1,Salary:"$sal"}).count();
db.emp.find( {$and:[ {sal:{$gte:3000}},{sal:{$lte:4500}} ]},{_id:0,ename:1,job:1,Salary:"$sal"}).sort({sal:1});
db.emp.find( {$and:[ {sal:{$gte:3000}},{sal:{$lte:4500}} ]},{_id:0,ename:1,job:1,Salary:"$sal"}).sort({sal:-1});

db.emp.find({$or:[{job:'manager'}, {job:'salesman'}]},{_id:0, ename:1, job:1, Salary:"$sal"});
db.emp.find({$or:[{job:'manager'}, {job:'salesman'}], sal:{$gt:3000}},{_id:0, ename:1, job:1, Salary:"$sal"});
db.emp.find( {$or:[ {sal:{$gte:3000}},{sal:{$lte:4500}} ]},{_id:0,ename:1,job:1,Salary:"$sal"});

db.emp.find({$or:[{sal:{$gte:2000}},{sal:{$lte:5000}}],$and:[{job:"programmer"}]},{_id:0,ename:1,job:1,Salary:"$sal"}).sort({sal:1});

db.getCollectionNames();
db.emp.renameCollection('Emp');
db.getCollectionNames();
db.Items.drop(); // tables drop
db.getCollectionNames();


db;
use  secondaryDB;
db
db.getCollectionNames();
db.getSiblingDB('primaryDB').getCollectionNames();
db.getSiblingDB('primaryDB').Emp.find();
db.getSiblingDB('primaryDB').Emp.find({},{_id:0,ename:true}).limit(5);

db.createCollection('abc');
show dbs;
db.getSiblingDB('primaryDB').Emp.find()[0];


use secondaryDB
db.dropDatabase(); // database drop
show dbs;
db

use primaryDB;
db
use secondaryDB
db
show dbs;


use primaryDB;
db.Books.find();
db.Books.remove({Title:"Hive"});  //Remove Document
db.Books.remove({"_id" : ObjectId("62903f080c4d30f24425588b")});
db.Books.find();



db.createCollection("Book1");
show tables;
var x = {}
x
print(x)
x
x.Title = "MongoDB";
x
x.cost = 1200
x
db.Book1.insert(x);
db.Book1.find();

x.Title ="Tejas"
x.cost = 1450
x._id = 1
x
db.Book1.insert(x);
db.Book1.find();

x._id=2
db.Book1.insert(x);
db.Book1.find();

x._id=3
db.Book1.insert(x);
db.Book1.find();

var y ={}
y
y.title='abc'
y
db.Book1.insert(y);
db.Book1.find();

db.Book1.remove({});
db.Book1.find();
x
y
db.Book1.insertMany([x,y]);
db.Book1.find();


function fn(){
... return "Hello World";
... }
fn()
Hello World

function add(x,y){ return (x+y); }
add(3,7)
10

function FN1(x,y){if(x>100) { return (x); } else {return (x+y); }}
FN1(20,20);
40
FN1(120,20);
120


---------------------------------------------------------------------------

// Mysql  Table Import to Mongodb

//Mysql CMD
mysql -hlocalhost -P3306 -uroot -p
show databases;
use db1;

1. select * from emp into outfile "F:\\IET\\CODING\\DBT\\Files\\Emp.csv";
2. select * from dept into outfile "F:\\IET\\CODING\\DBT\\Files\\Dept.csv";

// localhost client CMD
1. mongoimport --db=primaryDB --collection=emp --type=csv --file=F:\IET\CODING\DBT\Files\Emp.csv --fields "EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO,BONUSID,USERNAME,PWD"

2. mongoimport --db=primaryDB --collection=Dept --type=csv --file=F:\IET\CODING\DBT\Files\Dept.csv --fields "DEPTNO,DNAME,LOC,PWD,STARTEDON"

----------------------------------------------------------------------

// Mongodb Table Import to MySQl

1. mongoexport --db=primaryDB --collection=Books --type=json --out="F:\IET\CODING\DBT\MongoDB-Programs\books.json"


----------------------------------------------------------------
mongod --dbpath="F:\IET\CODING\DBT\MonGoDB" --bind_ip=192.168.43.120 --journal
mongosh --host=192.168.43.120 --port=27017

mongod --dbpath="F:\IET\CODING\DBT\MonGoDB" --journal
mongosh --host=localhost --port=27017


use primaryDB
config.set("editor","notepad++");
edit
db.Books.find();
edit // going to notepad ++ and then type commnads


------------------------------------------------------------------

28/05/2022

mongod --dbpath="F:\IET\CODING\DBT\MonGoDB" --journal
mongosh --host=localhost --port=27017

db.getCollectionNames();
db.createCollection('Student',{capped:true,size:1000,max:2});
db.getCollectionNames();

db.emp.isCapped();
db.Student.isCapped();
db.Student.insert({_id:1,sname:"Tejas"});
db.Student.find();

db.Student.insert({_id:2,sname:"Tejas",isActive:true});
db.Student.find();

db.Student.insert({_id:3,sname:"Tejas",isActive:false,salary:3000});
db.Student.find();

db.Student.insert({_id:4,sname:"Tejas4",isActive:false,salary:3000});
db.Student.find();

db.createCollection('Person');
show tables;
db.getCollectionNames();

edit db.Person.insertOne({_id:"Tejas",Name:"Tejas Jawale",City:"Nashik",State:"MH"})

PassPortDetails : {
		PassPortNo : "Tej12101999",
		validity:" 25 Years"
	}
	
db.Person.find();
db.Person.find({},{Name:true,City:true,State:true,"PassPortDetails.PassPortNo":true});

db.createCollection('Person1');
db.createCollection('PassPort');

db.Person1.insertOne({_id:"Tejas",Name:"Tejas Jawale",City:"Nashik",State:"MH"})
db.Person1.find();

db.PassPort.insertOne({_id:"Tejas",PassPortNo:"Tejas1211099", validity:"25 Years"});
db.PassPort.find();


db.Person1.find();
db.PassPort.find();
db.Person.find();

edit db.Person1.aggregate()
db.Person1.aggregate([{$lookup : {
	from:"PassPort",
	localField:"_id",
	foreignFeild:"_id"
	as: "Passport Details"

}}])

db.Person1.aggregate([{ $lookup: { from: "PassPort", localField: "_id", foreignField: "_id", as: "Passport Details" } }])


db.getCollectionNames();
db.Book1.find();
db.Book1.remove({});

db.Book1.insertMany([{ _id: "B1", Title: "T1", ISBN: "B1" }, { _id: "B2", Title: "T2", ISBN: "B2" }, { _id: "B3", Title: "T3", ISBN: "B3" }, { _id: "B4", Title: "T4", ISBN: "B4" }, { _id: "B5", Title: "T5", ISBN: "B5" }]);

db.Book1.find();

db.createCollection('Author');
db.Author.insertMany([{ _id: "A1", Name: "N1", bookID: "B1" }, { _id: "A2", Name: "N2", bookID: "B2" }, { _id: "A3", Name: "N4", bookID: "B4" }, { _id: "A5", Name: "N5", bookID: "B5" }, { _id: "A6", Name: "N6", bookID: "B6" }, { _id: "A7", Name: "N7", bookID: "B7" }, { _id: "A8", Name: "N8", bookID: "B8" }, { _id: "A9", Name: "N9", bookID: "B9" }, { _id: "A10", Name: "N10", bookID: "B10" }, { _id: "A11", Name: "N11", bookID: "B11" }]);

db.Author.find();

edit db.Book1.aggregate([{}])
db.Book1.aggregate([{ $lookup: { from: "Author", localField: "ISBN", forforeignField: "bookID", as: "Author Details" } }])


db.Author.updateOne({_id:'A10'},{$set:{name:"Tejas"}});
db.Author.find();
db.Author.updateOne({_id:'A10'},{$set:{Charges:12000}});
db.Author.find();

db.Author.updateMany({},{$set:{Charges:12000}});
db.Author.find();

db.Author.updateMany({},{$unset:{Charges:12000}});
db.Author.find();

db.Author.updateMany({},{$set:{C1:12000 , C2 : 30000}});
db.Author.find();

db.Author.updateMany({},{$unset:{C1:12000 , C2 : 30000}});
db.Author.updateMany({},{$unset:{C1:0 , C2 : 0}});
db.Author.find();

db.Author.updateMany({},{$set:{C1:12000 , C2 : 30000}});
db.Author.find();

db.Author.updateMany({},{$rename:{C1:"Salary" , C2 :"Commission"}});
db.Author.find();

db.Author.updateMany({},{$inc:{Salary:625.57}});
db.Author.find();

db.Author.updateOne({},{$inc:{Salary:25.57}});
db.Author.find();

db.Author.deleteOne({_id:"A11"});
db.Author.find();

db.Author.deleteMany({Salary:{$gt:12653}});
db.Author.find();
db.Author.deleteMany({Salary:{$lte:12653}});
db.Author.find();

db.Book1.deleteMany({_id:{$in[1,3,5]}})
db.Book1.find();

db.Emp.find();
db.Emp.aggregate([{$match:{job:"manager"}}])
db.Emp.aggregate([{ $match: { $or : [{ job: "manager" } , { job : "salesman" }]}}])

db.Emp.aggregate([{ $match: { $or : [{ job: "manager" } , { job : "salesman" }]}}, {$project :{_id:0,ename:1,job:1,gender:1,canVote:1,canDrive:1,salary:'$sal'}}])

db.Emp.aggregate([{ $match: { $or: [{ job: "manager" }, { job: "salesman" }] } }, { $project: { _id: 0, ename: 1, job: 1, gender: 1, canVote: 1, canDrive: 1, salary: '$sal', "New Salary": { $add: [10, 20] } } }])

db.Emp.aggregate([{ $match: { $or: [{ job: "manager" }, { job: "salesman" }] } }, { $project: { _id: 0, ename: 1, job: 1, gender: 1, canVote: 1, canDrive: 1, salary: '$sal', "New Salary": { $add: ["$sal", 75] } } }])

db.Emp.aggregate([{ $match: { $or: [{ job: "manager" }, { job: "salesman" }] } }, { $project: { _id: 0, ename: 1, job: 1, gender: 1, canVote: 1, canDrive: 1, salary: '$sal', commission:'$com', "Gross Salary":{ $add : ["$sal","$comm"] }, "New Salary": { $multiply: ["$sal", 75] } } }])

db.Emp.aggregate([{ $match: { $or: [{ job: "manager" }, { job: "salesman" }] } }, { $project: { _id: 0, ename: 1, job: 1, gender: 1, canVote: 1, canDrive: 1, salary: '$sal', commission:'$com', "Gross Salary":{ $add : ["$sal","$comm"] }, "New Salary": { $multiply: ["$sal", 75] },x:{$multiply:[{$add :[10,20]},7]} } }])

db.Emp.aggregate([{ $match: { $or : [{ job: "manager" } , { job : "salesman" }]}}, {$project :{_id:0,ename:1,job:1,salary:'$sal',commission:'$comm'}},{$addFields:{x:{$add:['$salary','$commission']}}}])


db.Emp.aggregate([{ $match: { $or : [{ job: "manager" } , { job : "salesman" }]}}, {$project :{_id:0,ename:1,job:1,salary:'$sal',commission:'$comm'}},{$addFields:{x:{$add:['$salary','$commission']},}},{$addFields :{y:{$multiply:['$x',2]}}}])


db.Emp.aggregate([{ $match: { $or : [{ job: "manager" } , { job : "salesman" }]}}, {$project :{_id:0,ename:1,job:1,"Gross Salary":'$sal',commission:'$comm'}},{$addFields:{x:{$add:["$Gross Salary",'$commission']},}},{$addFields :{y:{$multiply:['$x',2]}}}])

db.Emp.aggregate([{ $project: { _id: 0, ename: 1, sal: 1, comm: 1, "Upper Names": { $toUpper: "$ename" } } }, { $addFields: { x: { $ifNull: ['$comm', 0] } } }])



































